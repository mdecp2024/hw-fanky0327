<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-fanky0327">https://github.com/mdecp2024/hw-fanky0327</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-fanky0327/content/index.html">https://mdecp2024.github.io/hw-fanky0327/content/index.html</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/wzo5JzJt_y4" width="560"></iframe></p>
<h3>w10</h3>
<p>題目一:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/2FZoDVKfCTA" width="560"></iframe><br/>題目二:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Z1FLqGUOEx4" width="560"></iframe></p>
<p></p>
<p>題目三:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/vjIxFwu-O1Q" width="560"></iframe></p>
<h3>w11_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-fanky0327/content/Brython.html?src=https://gist.githubusercontent.com/fanky0327/638838840bc03551a38161746bf0a19b/raw/4c799b7614611bfcb57b9828fcc66ea7f2c9e124/11X11%2520CIRCLE">11x11圓形區域</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/YIJMZ2dI9ik" width="560"></iframe></p>
<p></p>
<p><a href="https://mdecp2024.github.io/hw-fanky0327/content/Brython.html?src=https://gist.githubusercontent.com/fanky0327/03d445cfaba2a92ff0e32257b2556d13/raw/6ebffd195fd3a3afade8224087231c65b8c4c281/PIXEL%2520CIRCLE">方格圍成的圓形</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/LeFOf2V0V7I" width="560"></iframe></p>
<p>尋求chatGPT的幫助，經過一系列的問與答獲得了2種程式碼，個別執行後拍成影片完成了今天的作業，我覺得尋求AI幫助並沒有什麼不妥，主要是不要一直依賴，要從他給的答案中學習，那AI就是個學習用的工具，把從AI身上獲得的知識變成自己的才是最重要的。</p>
<h3>w12</h3>
<p><a href="https://mdecp2024.github.io/hw-fanky0327/content/Brython.html?src=https://gist.githubusercontent.com/fanky0327/98efb7cb21cf2bd23c4ab1beb771a499/raw/89273b613ee437c5c8d77fd7896d598798269fb2/1%25E4%25B9%2598%25E5%2588%25B010">1x2x...x10</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/X5-ZPLtrW4c" width="560"></iframe></p>
<p>n = 1 #重製變數<br/>for i in range(1 , 11): #設定相乘的範圍<br/> n *= i #將每個i都乘上去<br/> print(n) #輸出每個n的結果</p>
<h3>w13_hw</h3>
<div id="brython_div1"><a href="https://mdecp2024.github.io/hw-fanky0327/content/Brython.html?src=https://gist.githubusercontent.com/fanky0327/e9668b9f1914e640303cd3fb5c390707/raw/c5e6ca421b3b6b32105b984d7c7b2d371b481c8e/w13_hw">w13作業</a></div>
<div></div>
<div>這作業真的對我來說超難，搞了很久也問了chatGPT好多次，但就是問不到我想要的版型，所以只好尋求同學的幫助，最後雖然做出來了，但還是有幾個地方有些小問題，我打算在之後的學習中慢慢修正。</div>
<div></div>
<div> </div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html, document as doc

# 設置畫布
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 2  # 增加線條寬度以使邊框更清晰

# 點與幾何圖形的判斷函式
def point_in_circle(x, y, cx, cy, r):
    return (x - cx) ** 2 + (y - cy) ** 2 < r ** 2

def point_in_rectangle(x, y, rx, ry, width, height):
    return rx <= x <= rx + width and ry <= y <= ry + height

def point_outside_rectangle(x, y, rx, ry, width, height):
    return not point_in_rectangle(x, y, rx, ry, width, height)

def point_on_line(x, y, x1, y1, x2, y2):
    return y == x and x1 <= x <= x2 and y1 <= y <= y2

# 區域判定
region_checks = [
    ("circle1", lambda x, y: point_in_circle(x, y, 200, 200, 141.4)),
    ("inside_square1", lambda x, y: point_in_rectangle(x, y, 100, 100, 200, 200)),
    ("outside_square1", lambda x, y: point_outside_rectangle(x, y, 100, 100, 200, 200)),
    ("circle2", lambda x, y: point_in_circle(x, y, 300, 300, 141.4)),
    ("inside_square2", lambda x, y: point_in_rectangle(x, y, 200, 200, 200, 200)),
    ("on_line_segment", lambda x, y: point_on_line(x, y, 100, 100, 300, 300)),
    ("above_line", lambda x, y: y < x),
    ("below_line", lambda x, y: y > x),
]

# 自定義顏色對應
region_colors = {
    "circle1": "#D3D3D3",  # lightgray
    "circle2": "#0000FF",  # blue
    "inside_square1": "#008000",  # green
    "outside_square1": "#FFFF00",  # yellow
    "inside_square2": "#FFFFFF",  # white
    "on_line_segment": "#000000",  # black
    "above_line": "#FFA500",  # orange
    "below_line": "#FFC0CB",  # pink
    "purple_overlap": "#00FF00",  # green
    "cyan_above_square1": "#00FFFF",  # cyan
    "magenta_below_square1": "#FF00FF",  # magenta
    "orange_left_square1": "#FFA500",  # orange
    "brown_right_square1": "#A52A2A",  # brown
    "lightblue_above_square2": "#ADD8E6",  # lightblue
    "pink_below_square2": "#FFC0CB",  # pink
    "lightgreen_left_square2": "#90EE90",  # lightgreen
    "lightyellow_right_square2": "#FFFFE0",  # lightyellow
}

# 顏色標註邏輯
def get_region_color(x, y):
    regions = [name for name, check in region_checks if check(x, y)]

    if "circle1" not in regions and "circle2" not in regions:
        return None

    if "circle1" in regions and "circle2" in regions:
        return region_colors["purple_overlap"]

    if "circle1" in regions and "inside_square1" in regions:
        return region_colors["inside_square1"] if "above_line" in regions else region_colors["below_line"]

    if "circle1" in regions and "outside_square1" in regions:
        if y < 100:
            return region_colors["cyan_above_square1"]
        elif y > 300:
            return region_colors["magenta_below_square1"]
        elif x < 100:
            return region_colors["orange_left_square1"]
        elif x > 300:
            return region_colors["brown_right_square1"]

    if "circle2" in regions and "inside_square2" in regions:
        return region_colors["inside_square2"]

    if "circle2" in regions and "outside_square1" in regions:
        if y < 200:
            return region_colors["lightblue_above_square2"]
        elif y > 400:
            return region_colors["pink_below_square2"]
        elif x < 200:
            return region_colors["lightgreen_left_square2"]
        elif x > 400:
            return region_colors["lightyellow_right_square2"]

    if "on_line_segment" in regions:
        return region_colors["on_line_segment"]

    return None

# 繪製掃描點並著色
def scan_and_draw():
    for y in range(canvas.height):
        for x in range(canvas.width):
            color = get_region_color(x, y)
            if color:
                ctx.fillStyle = color
                ctx.fillRect(x, y, 1, 1)

# 開始掃描和標示
scan_and_draw()

# 畫兩個矩形 (紅色邊框)
ctx.strokeStyle = "red"  
ctx.strokeRect(100, 100, 200, 200)
ctx.strokeRect(200, 200, 200, 200)

# 畫對角線 (藍色)
ctx.strokeStyle = "blue"
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(400, 400)
ctx.stroke()

# 畫兩個圓形 (黑色)
ctx.strokeStyle = "black"
def draw_circle(cx, cy, radius):
    ctx.beginPath()
    ctx.arc(cx, cy, radius, 0, 2 * 3.14)
    ctx.stroke()

draw_circle(200, 200, 141.4)
draw_circle(300, 300, 141.4)
</script>
</p>
<h3>w14_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-fanky0327/content/Brython.html?src=https://gist.githubusercontent.com/fanky0327/4466a00cd81bacfe854922ce45608d5c/raw/04ebb3aaff344f7957d76d8a697edfa0e6fbbe25/%25E4%25B8%2589%25E5%259C%2593%25E7%259B%25B8%25E6%258E%25A5">三圓相接</a></p>
<div id="brython_div1"></div>
<h3>w15</h3>
<p>題目一: <a href="https://mdecp2024.github.io/hw-fanky0327/content/Brython.html?src=https://gist.githubusercontent.com/fanky0327/f2ca859a3fa3066e021893645a9b3ded/raw/8f516aefb8fbe1732cff362d91721055ab958a1e/1%25E7%25B4%25AF%25E5%258A%25A0%25E5%2588%25B0100">1累加到100</a></p>
<p>題目二: <a href="https://mdecp2024.github.io/hw-fanky0327/content/Brython.html?src=https://gist.githubusercontent.com/fanky0327/50f276da21aecb78212efdf5c66af0b0/raw/01c405bdc553e4c044ffb50bb55f3fa33b2b977a/1%25E7%25B4%25AF%25E5%258A%25A0%25E5%2588%25B0100%2520part.2">addto</a></p>
<p>題目三: <a href="https://mdecp2024.github.io/hw-fanky0327/content/Brython.html?src=https://gist.githubusercontent.com/fanky0327/57223b59b023202cb4ffcc09134bcf64/raw/d25b0c20ea8ce39892a3dc26dddf0649bef78c4a/1%25E7%25B4%25AF%25E5%258A%25A0%25E5%2588%25B0100%2520part.3">add_only_even</a></p>
<p>題目四: <a href="https://mdecp2024.github.io/hw-fanky0327/content/Brython.html?src=https://gist.githubusercontent.com/fanky0327/575ed3e7b262b202e5fd5e5eef59067c/raw/56c6d754f3f5b1e1dde7b5db253980e1a5e493d0/1%25E7%25B4%25AF%25E5%258A%25A0%25E5%2588%25B0100%2520part.4">add_avoid_8</a></p>
<p>題目一用了本來就在Brython的程式碼，第一行的init是初始化變數，作為累加的起始點，然後upto是累加結束點，然後利用 for 重複迴圈與變數加法進行累加得出結果。</p>
<p>題目二則是用了國中就學過的數列運算S=n(a1+an)/來寫，感覺非常好用，把數學加上程式碼這種感覺很新奇。</p>
<p>題目三的變數累加多了一個if i % 2 == 0判斷是否為偶數的條件，題目四則是使用if '8' not in str(i)去避開8來做累加。</p>
<p>總的來說這次作業感覺上不難，我希望我以後可以不需要利用ChatGPT就可以完成作業。</p>
<p>額外作業:<a href="https://mdecp2024.github.io/hw-fanky0327/content/Brython.html?src=https://gist.githubusercontent.com/fanky0327/9b03930bda817b61e2147f1187ff1e35/raw/a6b9b0a37ec599e02ae11aaf4809e45b05bab4a1/1%25E7%25B4%25AF%25E5%258A%25A0%25E5%2588%25B0100%25E9%2581%25BF%25E9%2596%258B3%25E8%25B7%259F8">1累加到100避開3跟8</a></p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<div id="brython_div1"><a href="https://mdecp2024.github.io/hw-fanky0327/content/Brython.html?src=https://gist.githubusercontent.com/fanky0327/61eabdbba6cb247fee35d19f74df9af0/raw/d5aec349bb712c58e7104be3815eee6934baa8c8/w16_exam1">題目1展示</a></div>
<div><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="//www.youtube.com/embed/3NzAcFXOrMg" width="560"></iframe></div>
<p></p>
<!-- 导入 Brython 程序库 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- Brython 动态内容区域 -->
<div id="brython_div1"><a href="https://mdecp2024.github.io/hw-fanky0327/content/Brython.html?src=https://gist.githubusercontent.com/fanky0327/61eabdbba6cb247fee35d19f74df9af0/raw/d5aec349bb712c58e7104be3815eee6934baa8c8/w16_exam1"></a></div>
<div id="brython_div1"><a href="https://mdecp2024.github.io/hw-fanky0327/content/Brython.html?src=https://gist.githubusercontent.com/fanky0327/61eabdbba6cb247fee35d19f74df9af0/raw/d5aec349bb712c58e7104be3815eee6934baa8c8/w16_exam1"></a></div>
<div id="brython_div1"><a href="https://mdecp2024.github.io/hw-fanky0327/content/Brython.html?src=https://gist.githubusercontent.com/fanky0327/61eabdbba6cb247fee35d19f74df9af0/raw/d5aec349bb712c58e7104be3815eee6934baa8c8/w16_exam1"></a></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=500, height=200)
brython_div = doc["brython_div1"]
brython_div <= canvas

# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")

# 畫出 X 軸
ctx.beginPath()
ctx.strokeStyle = 'black'
ctx.lineWidth = 2
ctx.moveTo(31, 30)  # 原點
ctx.lineTo(200, 30) # 向右延伸
ctx.stroke()

# 畫出 Y 軸
ctx.beginPath()
ctx.moveTo(31, 30)  # 原點
ctx.lineTo(31, 150)  # 向下延伸
ctx.stroke()

# 標示原點座標
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText("(31, 30)", 35, 25)

ctx.font = "20px Arial"
ctx.fillStyle = "black"
ctx.fillText("Y", 40, 150)

ctx.font = "20px Arial"
ctx.fillStyle = "black"
ctx.fillText("X", 185, 30)

# 位移偏移量，將原點 (31, 48) 作為新的繪圖基準
offset_x = 31
offset_y = 48

# 畫橙色六邊形
ctx.beginPath()
ctx.fillStyle = "#F47920"
ctx.moveTo(offset_x + 40, offset_y + 63)
ctx.lineTo(offset_x + 60, offset_y + 33)
ctx.lineTo(offset_x + 90, offset_y + 33)
ctx.lineTo(offset_x + 110, offset_y + 63)
ctx.lineTo(offset_x + 90, offset_y + 93)
ctx.lineTo(offset_x + 60, offset_y + 93)
ctx.closePath()
ctx.fill()

# 畫綠色菱形
ctx.beginPath()
ctx.fillStyle = "#009F95"
ctx.moveTo(offset_x + 130, offset_y + 63)
ctx.lineTo(offset_x + 150, offset_y + 33)
ctx.lineTo(offset_x + 170, offset_y + 63)
ctx.lineTo(offset_x + 150, offset_y + 93)
ctx.closePath()
ctx.fill()

# 藍色三角形 (頂點在菱形右側，方向朝下)
ctx.beginPath()
ctx.fillStyle = "#40B4CB"
ctx.moveTo(offset_x + 174, offset_y + 63)  # 頂點在菱形右側
ctx.lineTo(offset_x + 154, offset_y + 93)  # 左下角
ctx.lineTo(offset_x + 194, offset_y + 93)  # 右下角
ctx.closePath()
ctx.fill()

# 畫粉紅色圓形
ctx.beginPath()
ctx.fillStyle = "#EB008B"
ctx.arc(offset_x + 220, offset_y + 63, 30, 0, 2* 3.14159)
ctx.fill()

# 畫黃色正方形
ctx.beginPath()
ctx.fillStyle = "#FDD56A"
ctx.rect(offset_x + 260, offset_y + 43, 40, 40)
ctx.fill()

# 畫藍色矩形
ctx.beginPath()
ctx.fillStyle = "#003A70"
ctx.rect(offset_x + 320, offset_y + 53, 60, 20)
ctx.fill()
</script>
</p><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam2</h3>
<p><a href="https://mdecp2024.github.io/hw-fanky0327/content/Brython.html?src=https://gist.githubusercontent.com/fanky0327/64e4a83793da8d5de301851ba7cf0eb2/raw/0ab95c70fbf33a7fbc7e877b6bfaa27a325fdf77/w16_exam2">題目2展示</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/sUuNjNuNSIA" width="560"></iframe></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=300, height=300)
brython_div = doc["brython_div1"]
brython_div <= canvas

# 獲取繪圖上下文
ctx = canvas.getContext("2d")

# 設定迷宮線條的顏色與寬度
line_color = "blue"
line_width = 2
ctx.strokeStyle = line_color
ctx.lineWidth = line_width

# 新的原點
origin_x, origin_y = 31, 30

# 繪製迷宮
lines = [
    [(0, -22), (80, -22)],
    [(120, -22), (200, -22)],
    [(0, -22), (0, 178)],
    [(200, -22), (200, 178)],
    [(0, 178), (80, 178)],
    [(200, 178), (120, 178)],
    [(40, 18), (160, 18)],
    [(160, 18), (160, 58)],
    [(80, 18), (80, 58)],
    [(80, 58), (0, 58)],
    [(40, 98), (160, 98)],
    [(160, 98), (160, 178)],
    [(120, 98), (120, 58)],
    [(40, 98), (40, 138)],
    [(80, 178), (80, 138)],
    [(80, 138), (120, 138)],
]

# 根據新原點繪製所有線條
for line in lines:
    (x1, y1), (x2, y2) = line
    ctx.beginPath()
    ctx.moveTo(origin_x + x1, origin_y + y1)
    ctx.lineTo(origin_x + x2, origin_y + y2)
    ctx.stroke()

# 標註原點
ctx.fillStyle = "red"
ctx.font = "10px Arial"
ctx.fillText("原點(31,30)", 30, 220)
</script>
</p><h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam3</h3>
<p><a href="https://mdecp2024.github.io/hw-fanky0327/content/Brython.html?src=https://gist.githubusercontent.com/fanky0327/57a4b8f9da7d2621594a70ade9ce77d0/raw/037052559fa636749898b86e756a654e81cf8335/w16_exam3">題目三展示</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/cHGUdq7iOPY" width="560"></iframe></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=300, height=300)
brython_div = doc["brython_div1"]
brython_div <= canvas

# 獲取繪圖上下文
ctx = canvas.getContext("2d")

# 設定迷宮線條的顏色與寬度
line_color = "blue"
line_width = 2
ctx.strokeStyle = line_color
ctx.lineWidth = line_width

# 新的原點
origin_x, origin_y = 31, 30

# 繪製迷宮
lines = [
    [(0, -22), (80, -22)],
    [(120, -22), (200, -22)],
    [(0, -22), (0, 178)],
    [(200, -22), (200, 178)],
    [(0, 178), (80, 178)],
    [(200, 178), (120, 178)],
    [(40, 18), (160, 18)],
    [(160, 18), (160, 58)],
    [(80, 18), (80, 58)],
    [(80, 58), (0, 58)],
    [(40, 98), (160, 98)],
    [(160, 98), (160, 178)],
    [(120, 98), (120, 58)],
    [(40, 98), (40, 138)],
    [(80, 178), (80, 138)],
    [(80, 138), (120, 138)],
]

# 根據新原點繪製所有線條
for line in lines:
    (x1, y1), (x2, y2) = line
    ctx.beginPath()
    ctx.moveTo(origin_x + x1, origin_y + y1)
    ctx.lineTo(origin_x + x2, origin_y + y2)
    ctx.stroke()
# 設定紅色線條的顏色與寬度
line_color = "red"
ctx.strokeStyle = line_color
ctx.lineWidth = 2

# 繪製新的紅色線條
ctx.beginPath()
ctx.moveTo(131, 8)  # 新紅色線條的起點
ctx.lineTo(131, 28)  # 新紅色線條的終點
ctx.stroke()

# 繪製另一條紅色線條
ctx.beginPath()
ctx.moveTo(131, 28)  
ctx.lineTo(211, 28)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(211, 28)  
ctx.lineTo(211, 108)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(211, 108)  
ctx.lineTo(171, 108)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(171, 108)  
ctx.lineTo(171, 68)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(171, 68)  
ctx.lineTo(131, 68)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(131, 68)  
ctx.lineTo(131, 108)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(131, 108)  
ctx.lineTo(51, 108)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(51, 108)  
ctx.lineTo(51, 188)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(51, 188)  
ctx.lineTo(91, 188)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(91, 188)  
ctx.lineTo(91, 148)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(91, 148)  
ctx.lineTo(171, 148)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(171, 148)  
ctx.lineTo(171, 188)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(171, 188)  
ctx.lineTo(131, 188)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(131, 188)  
ctx.lineTo(131, 208)  
ctx.stroke()

# 標註原點
ctx.fillStyle = "red"
ctx.font = "10px Arial"
ctx.fillText("原點(31,30)", 30, 220)
</script>
</p><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p>      <a href="/downloads/計算機概論期末報告.pdf">計算機概論期末報告.pdf</a></p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p></p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p><h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>